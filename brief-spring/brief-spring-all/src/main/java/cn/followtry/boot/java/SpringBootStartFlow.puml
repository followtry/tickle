@startuml
BriefSpringBootApplication -> SpringApplication: main
== 设置主要的参数 ==

SpringApplication -> WebApplicationType : 《推断应用类型》
activate WebApplicationType
WebApplicationType -> WebApplicationType : deduceFromClasspath
note left: 根据引入的 jar 包推断应用的类型
SpringApplication <- WebApplicationType : 应用类型
deactivate WebApplicationType


SpringApplication -> SpringFactoriesLoader: getSpringFactoriesInstances
activate SpringFactoriesLoader
SpringFactoriesLoader -> SpringFactoriesLoader: loadFactoryNames
note left
 实例化 ApplicationContextInitializer
 和 ApplicationListener的实现类
end note
SpringApplication <- SpringFactoriesLoader: 获取到 spring.factories 中配置的实例
deactivate SpringFactoriesLoader

SpringApplication -> SpringApplication: deduceMainApplicationClass
note left : 推断主要的类

== SpringApplication.run 为主要执行方法 ==

SpringApplication -> SpringApplication: run
activate SpringApplication
SpringApplication -> SpringApplicationRunListeners: getRunListeners
note left: 设置`SpringApplicationRunListener`监听器并实例化
activate SpringApplication
activate SpringApplicationRunListeners
SpringApplicationRunListeners -> SpringApplicationRunListeners: new
return 获取 listener 实例
deactivate SpringApplicationRunListeners
deactivate SpringApplication


SpringApplication -> ApplicationArguments: 封装main 方法传递的参数
activate SpringApplication
activate ApplicationArguments
ApplicationArguments -> ApplicationArguments: DefaultApplicationArguments
return 返回用默认实现类封装参数的实例
deactivate ApplicationArguments
deactivate SpringApplication


SpringApplication -> SpringApplication: prepareEnvironment
activate SpringApplication
note left: 根据 webApplicationType 获取环境信息。
deactivate SpringApplication

SpringApplication -> AnnotationConfigServletWebServerApplicationContext: createApplicationContext
activate SpringApplication
note left
根据 webApplicationType 获取到 Servlet 或 reactive类
并通过工具`BeanUtils.instantiateClass`将其实例化
end note
    AnnotationConfigServletWebServerApplicationContext -> AnnotationConfigServletWebServerApplicationContext: new
    activate AnnotationConfigServletWebServerApplicationContext

    AnnotationConfigServletWebServerApplicationContext -> AnnotatedBeanDefinitionReader: 创建实例
    activate AnnotatedBeanDefinitionReader
    AnnotatedBeanDefinitionReader -> AnnotatedBeanDefinitionReader: new
        note left
        1. 设置默认的`beanNameGenerator`为`AnnotationBeanNameGenerator`
        2. 设置默认的`scopeMetadataResolver`为`AnnotationScopeMetadataResolver`
        3. 实例化`conditionEvaluator`为`ConditionEvaluator`

        end note
        AnnotatedBeanDefinitionReader -> AnnotationConfigUtils: 注册注解配置的处理器
        activate AnnotationConfigUtils
        AnnotationConfigUtils -> AnnotationConfigUtils:registerAnnotationConfigProcessors
        note left
        1. ConfigurationClassPostProcessor(**解析注解配置的关键处理类**)
        2. AutowiredAnnotationBeanPostProcessor(**解析注解`@Autowired`时使用**)
        3. CommonAnnotationBeanPostProcessor（**处理注解`@Resource`的类**）
        4. EventListenerMethodProcessor（**处理注解`@EventListener`的类**）
        5. DefaultEventListenerFactory（**用来管理`EventListenerFactory`的类**）
        end note
        return
    return 获取注解的bean的读取器

    AnnotationConfigServletWebServerApplicationContext -> ClassPathBeanDefinitionScanner: 创建扫描器实例
    activate ClassPathBeanDefinitionScanner
    note left
         1. 设置默认的`beanNameGenerator`为`AnnotationBeanNameGenerator`
         2. 设置默认的`beanDefinitionDefaults`为`BeanDefinitionDefaults`
         3. 设置默认的`scopeMetadataResolver`为`AnnotationScopeMetadataResolver`
         4. 设置默认支持注解配置`includeAnnotationConfig=true`
         5. 注册默认的过滤器，注解`@Component`、`@Named`和`@ManagedBean`
    end note
    ClassPathBeanDefinitionScanner -> ClassPathBeanDefinitionScanner: registerDefaultFilters
    return 获取扫描器

    deactivate AnnotationConfigServletWebServerApplicationContext
    SpringApplication <- AnnotationConfigServletWebServerApplicationContext: 获取到ApplicationContext的实例
deactivate SpringApplication

SpringApplication -> SpringApplication: prepareContext
activate SpringApplication
note left
1. 设置自定义的name 生成器和自定义加载器
2. 支持ApplicationContextInitializer实现类的实例化并为 context 设置值
3. 将springApplicationArguments，springBootBanner
和启动类BriefSpringBootApplication都注册为单例
4. 默认不允许 BeanDefinition 覆盖和延迟初始化
end note
    SpringApplication -> BeanDefinitionLoader: createBeanDefinitionLoader
    activate BeanDefinitionLoader
        BeanDefinitionLoader -> AnnotatedBeanDefinitionReader: 创建注解配置读取器
        activate AnnotatedBeanDefinitionReader
        return
        BeanDefinitionLoader -> XmlBeanDefinitionReader: 创建 xml配置读取器
        activate XmlBeanDefinitionReader
        return
        BeanDefinitionLoader -> ClassPathBeanDefinitionScanner: 创建类扫描器
        activate ClassPathBeanDefinitionScanner
        return
        BeanDefinitionLoader -> ClassExcludeFilter: 添加排除的过滤器
        activate ClassExcludeFilter
        return
    return
deactivate SpringApplication

SpringApplication -> SpringApplication: refreshContext
activate SpringApplication
    SpringApplication -> AbstractApplicationContext: refresh
    activate AbstractApplicationContext
        AbstractApplicationContext -> AbstractApplicationContext: prepareRefresh
        activate AbstractApplicationContext
        return

        AbstractApplicationContext -> AbstractApplicationContext: obtainFreshBeanFactory
        activate AbstractApplicationContext
        return

        AbstractApplicationContext -> AbstractApplicationContext: prepareBeanFactory
        activate AbstractApplicationContext
        return

        AbstractApplicationContext -> AbstractApplicationContext: postProcessBeanFactory
        activate AbstractApplicationContext
        return

        AbstractApplicationContext -> AbstractApplicationContext: invokeBeanFactoryPostProcessors
        activate AbstractApplicationContext
        return

        AbstractApplicationContext -> AbstractApplicationContext: registerBeanPostProcessors
        activate AbstractApplicationContext
        return

        AbstractApplicationContext -> AbstractApplicationContext: initMessageSource
        activate AbstractApplicationContext
        return

        AbstractApplicationContext -> AbstractApplicationContext: initApplicationEventMulticaster
        activate AbstractApplicationContext
        return

        AbstractApplicationContext -> AbstractApplicationContext: onRefresh
        activate AbstractApplicationContext
        return

        AbstractApplicationContext -> AbstractApplicationContext: registerListeners
        activate AbstractApplicationContext
        return

        AbstractApplicationContext -> AbstractApplicationContext: finishBeanFactoryInitialization
        activate AbstractApplicationContext
        return

        AbstractApplicationContext -> AbstractApplicationContext: finishRefresh
        activate AbstractApplicationContext
        return

    return 刷新完毕
return 刷新 Spring 的 bean 信息
note left
刷新上下文内容
end note
deactivate SpringApplication

SpringApplication -> SpringApplication: afterRefresh
activate SpringApplication
note left
刷新后的处理
end note
deactivate SpringApplicatio

SpringApplication -> SpringApplication: callRunners
activate SpringApplication
note left
调用运行器
end note
deactivate SpringApplication

BriefSpringBootApplication <- SpringApplication: 完成启动
@enduml


5. 准备 ApplicationContext 的数据

   8. 创建BeanDefinitionLoader，在 SpringBoot中
      1. 实例化注解读取器 `AnnotatedBeanDefinitionReader`
         1. 在实例化时，会通过工具注册几个 BeanFactoryPostProcessor,如`ConfigurationClassPostProcessor`和`AutowiredAnnotationBeanPostProcessor`。参考`AnnotationConfigUtils.registerAnnotationConfigProcessors`
         2. 还会实例化条件推断器`ConditionEvaluator`,用于`@Conditional`注解
      2. 实例化 xml 读取器 `XmlBeanDefinitionReader`
         1. 实例化常量
         2. 设置`beanNameGenerator`默认为`DefaultBeanNameGenerator`。
         3. xml 的校验模式默认设置为自动`VALIDATION_AUTO`
         4. doc 读取类`documentReaderClass`默认设置为`DefaultBeanDefinitionDocumentReader`
         5. doc 加载器`documentLoader`默认设置为`DefaultDocumentLoader`。
      3. 实例化扫描器 `ClassPathBeanDefinitionScanner`
         1. 注册默认的过滤器
         2. 扫描器将当前目标类过滤掉
      4. 通过 load 方法加载 bean 信息，并将当前类转换为 BeanDefinition 注册进容器中。还未实例化
   9.  刷新 Context，会调用`AbstractApplicationContext`中的`refresh`进行刷新操作
       1.  为刷新做准备
           1.  扫描器缓存清空
           2.  容器状态设置为激活
           3.  初始化属性源`PropertySources`
           4.  校验请求的属性
           5.  在刷新之前注册本地监听器
       2. 获取 BeanFactory
          1. 刷新 BeanFactory。此处注解方式会调用 `GenericApplicationContext`的`refreshBeanFactory`，而 xml 方式会调用`AbstractRefreshableApplicationContext`的`refreshBeanFactory`方法。
       3.  准备 BeanFactory
           1.  设置 Bean 表达式解析器 `StandardBeanExpressionResolver`
           2.  添加属性编辑器注册  `ResourceEditorRegistrar`
           3.  添加 `BeanPostProcessor`的后处理器`ApplicationContextAwareProcessor`,用于处理时限了`aware`的子接口的实例 bean。**在此时，`beanPostProcessors`属性内还是空的。**
               1.  还可以设置是否具有实例化和销毁 aware。通过实现`InstantiationAwareBeanPostProcessor`和`DestructionAwareBeanPostProcessor`接口
               2.  此处还有个顺序问题，将以前注册的相同的处理器删除，然后再在最后加上该处理器
           4.  忽略指定的依赖接口进行自动装配`autowiring`,包括`EnvironmentAware`,`EmbeddedValueResolverAware`,`ResourceLoaderAware`,`ApplicationEventPublisherAware`,`MessageSourceAware`,`ApplicationContextAware`。
           5.  注册可解析的依赖。`BeanFactory`,`ResourceLoader`,`ApplicationEventPublisher`,`ApplicationContext`。
           6.  添加 `BeanPostProcessor`的后处理器`ApplicationListenerDetector`。用于检测实现了`ApplicationListener`接口的 bean。
           7.  将`environment`,`systemProperties`,`systemEnvironment`注册为单例 Bean
       4. 后处理Bean工厂。实现类：`ServletWebServerApplicationContext`
          1. 添加 `BeanPostProcessor`的后处理器`WebApplicationContextServletContextAwareProcessor`,用来为实现了接口`ServletContextAware`,`ServletConfigAware`的类设置变量
          2. 忽略指定的依赖接口进行自动装配`autowiring`,`ServletContextAware`
          3. 注册 Scope。`request`、`session`
          4. 注册可解析的依赖。
             1. `ServletRequest` -> `RequestObjectFactory`
             2. `ServletResponse` -> `ResponseObjectFactory`
             3. `HttpSession` -> `SessionObjectFactory`
             4. `WebRequest` -> `WebRequestObjectFactory`
          5. 扫描器扫描和指定注解的bean 的注册。可指定
       5. 调用Bean 工厂后处理器
          1. 获取到`BeanDefinitionRegistryPostProcessor`的 bean 为`org.springframework.context.annotation.ConfigurationClassPostProcessor`。
          2. 将上一步获取到的处理器加入到`BeanDefinitionRegistryPostProcessor`集合中，并通过方法**PostProcessorRegistrationDelegate#invokeBeanFactoryPostProcessors**调用BeanDefinition注册器的后处理器，即多个后处理器通过`postProcessBeanDefinitionRegistry`来执行。在`SharedMetadataReaderFactoryContextInitializer.CachingMetadataReaderFactoryPostProcessor`的方法`configureConfigurationClassPostProcessor`中获取已经注册为 BeanDefinition 的`org.springframework.context.annotation.internalConfigurationAnnotationProcessor`。
          3. 以`ConfigurationClassPostProcessor`为例，会扫描出所有的候选的 BeanDefinition 的名称集合。
             1. 检查是否是`ConfigurationClass`的候选类。通过查找元数据中是否与`@Configuration`注解。通过解析注解`@Order`，来获得顺序数字，通过 `list.sort()`使得候选类重新排序
             2. 将选出的候选类封装在`BeanDefinitionHolder`中，并存在集合里。
             3. 实例化解析类`ConfigurationClassParser`。并在该类中实例化了`ComponentScanAnnotationParser`和`ConditionEvaluator`分别用来扫描和条件判断。还实例化了`DeferredImportSelectorHandler`，即延时导入处理器
             4. 通过`ConfigurationClassParser.parse`方法开始解析候选类。
                1. 通过`conditionEvaluator`判断是否符合跳过的条件。
                2. 递归地处理`ConfigurationClass`类及其超类层次结构
                   1. 先判断`@Component`注解来递归处理其成员类
                   2. 判断`@PropertySources`注解，处理器属性源
                   3. 判断`@ComponentScans`注解，使用扫描器`ComponentScanAnnotationParser`扫描 Bean 信息并添加进容器中。
                   4. 判断 Bean 是否为`ConfigurationClass`的候选 bean，是的话递归解析。
                   5. 处理完`ConfigurationClass`类后，处理`@Import`注解的类，也是递归取找类上的`@Import` 注解。如果有的话，将其 value 收集到`Set<SourceClass>`的集合中。
                   6. 处理`@ImportResource`注解的资源信息
                   7. 处理`@Bean`注解的方法
                   8. 处理接口上的默认方法
                3. `DeferredImportSelectorHandler`用于处理`Import`
                   1.  扫描`META-INF/spring.factories`内所有的`org.springframework.boot.autoconfigure.EnableAutoConfiguration`的配置类。
                   2.  移除重复的和被指定排除的类
                   3.  获取所有的过滤器`@ConditionOn***`系列的执行类，查看是否匹配。如果不匹配则直接过滤掉。
                   4.  通过`ConditionEvaluationReportAutoConfigurationImportListener.onAutoConfigurationImportEvent`记录信息
                   5.  生成`AutoConfigurationEntry`包含待处理的自动化配置类和排除的类。
                   6.  将过滤后的 class 缓存在`AutoConfigurationImportSelector.AutoConfigurationGroup#entries`中
                   7.  通过执行`AutoConfigurationImportSelector.AutoConfigurationGroup#selectImports`,来筛选出哪些需要 import 的。
                   8.  通过`org.springframework.context.annotation.ConfigurationClassParser#processImports`方法来处理自动化配置类。
                   9. 因为所有的自动化配置类有用`@Configuration`标记了。因此这些类都是通过`ConfigurationClassParser#processConfigurationClass`来处理所有的配置类及其引入的配置类。
                4.  实例化读取器`ConfigurationClassBeanDefinitionReader`,并将刚刚扫描出的自动化配置类转为 BeanDefinition 并注册进 Spring 容器。
                    1.  在`org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader#loadBeanDefinitions`将所有的自动化配置类注册为 BeanDefinition。
                5. 循环解析
                6. 将`org.springframework.context.annotation.ConfigurationClassPostProcessor.importRegistry`注册为单例,
             5. 通过`ConfigurationClassParser.validate`校验
             6. 初始化`ConfigurationClassBeanDefinitionReader`,通过方法`loadBeanDefinitions`加载配置的 Class，如 SpringBoot 中配置的自动启动配置类  **此处是加载自动化配置的 bean 的地方**
                1. `org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader#loadBeanDefinitionsForConfigurationClass`为实际加载自动配置类的位置
          4. 调用到目前为止处理的所有处理器的postProcessBeanFactory回调。
       6. 注册`BeanPostProcessors`
          1. 将`BeanPostProcessorChecker`、`ConfigurationPropertiesBindingPostProcessor`、`MethodValidationPostProcessor`、`webServerFactoryCustomizerBeanPostProcessor`、`errorPageRegistrarBeanPostProcessor`、`MethodValidationPostProcessor`、`MethodValidationPostProcessor`、`CommonAnnotationBeanPostProcessor`、`AutowiredAnnotationBeanPostProcessor`加入到`BeanPostProcessors`
          2. 将`ApplicationListenerDetector`重新加到`BeanPostProcessors`的结尾。

            ```java
            [
                "org.springframework.context.annotation.internalAutowiredAnnotationProcessor",
                "org.springframework.context.annotation.internalCommonAnnotationProcessor",
                "org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor",
                "webServerFactoryCustomizerBeanPostProcessor",
                "errorPageRegistrarBeanPostProcessor",
                "methodValidationPostProcessor"
            ]
            ```

       7. 初始化消息源，国际化
       8. 初始化时间多播器
       9. 刷新其他bean
       10. 注册监听器
       11. 实例化剩余的所有非懒加载的单例 bean `finishBeanFactoryInitialization`。
           1.  实际实例化的位置： `org.springframework.beans.factory.config.ConfigurableListableBeanFactory#preInstantiateSingletons`。通过调用`org.springframework.beans.factory.support.AbstractBeanFactory#getBean`完成实例化。
               1.  在`AbstractAutowireCapableBeanFactory#applyMergedBeanDefinitionPostProcessors`方法中完成 Bean 的后处理设置，比如解析`@autowaired`、`@Value`和`@Inject` 注解的 bean 等。
               2.  在`AbstractAutowireCapableBeanFactory#initializeBean`处完成`aware`方法的设置，调用初始化方法
   10.